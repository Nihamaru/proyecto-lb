{
  "version": 3,
  "file": "auto-migrate.js",
  "sourceRoot": "../src/",
  "sources": [
    "auto-migrate.coffee"
  ],
  "names": [],
  "mappings": "AAAA;AAAA,MAAA,OAAA,EAAA,OAAA,EAAA,KAAA,EAAA,UAAA,EAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA;;EAAA,OAAA,GAAgB,OAAA,CAAQ,UAAR;;EAChB,IAAA,GAAgB,OAAA,CAAQ,MAAR;;EAChB,UAAA,GAAgB,OAAA,CAAQ,8BAAR;;EAChB,WAAA,GAAgB,OAAA,CAAQ,+BAAR;;EAChB,KAAA,GAAgB,OAAA,CAAQ,OAAR,CAAA,CAAiB,4CAAjB;;EAChB,OAAA,GAAgB,OAAA,CAAQ,eAAR;;EAChB,MAAA,GAAgB,OAAA,CAAQ,OAAA,GAAU,2BAAlB;;EAChB,UAAA,GAAgB,OAAA,CAAQ,eAAR,EAPhB;;;EAUA,MAAM,CAAC,OAAP,GAAiB,QAAA,CAAC,GAAD,EAAM,OAAN,CAAA;AACf,QAAA,WAAA,EAAA;IAAA,OAAA,GAAU;IACV,WAAA,GAAc,CAAC,OAAA,IAAY,OAAO,CAAC,MAArB,CAAA,IAAgC;WAC9C,OAAO,CAAC,GAAR,CAAY,WAAZ,EAAyB,QAAA,CAAC,KAAD,CAAA;AACvB,UAAA,EAAA,EAAA;MAAA,EAAA,GAAK,GAAG,CAAC,WAAY,CAAA,MAAO,CAAA,KAAA,CAAM,CAAC,UAAd;MACrB,EAAE,CAAC,eAAH,CAAmB,CAAnB;MACA,IAAG,EAAE,CAAC,SAAN;eACE,MAAA,GAAS,EAAE,CAAC,WAAH,CAAe,KAAf,EADX;OAAA,MAAA;eAGE,IAAI,OAAJ,CAAY,QAAA,CAAC,OAAD,EAAU,MAAV,CAAA;iBACV,EAAE,CAAC,IAAH,CAAQ,WAAR,EAAqB,QAAA,CAAA,CAAA;mBACnB,OAAA,CAAQ,EAAE,CAAC,WAAH,CAAe,KAAf,CAAR;UADmB,CAArB;QADU,CAAZ,EAHF;;IAHuB,CAAzB,CASA,CAAC,IATD,CASM,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;MACJ,IAAA,CAAiC,IAAjC;QAAA,IAAA,GAAO,WAAY,CAAA,KAAA,EAAnB;;MACA,KAAA,CAAM,QAAA,GAAW,IAAX,GAAkB,eAAxB;aACA,OAAO,CAAC,IAAR,CAAa,GAAG,CAAC,MAAO,CAAA,IAAA,CAAxB;IAHI,CATN,CAaA,CAAC,IAbD,CAaM,QAAA,CAAC,OAAD,CAAA;MACJ,KAAA,CAAM,QAAA,GAAS,OAAO,CAAC,MAAjB,GAAyB,mBAA/B;AACA,aAAO;IAFH,CAbN;EAHe;AAVjB",
  "sourcesContent": [
    "Promise       = require 'bluebird'\npath          = require 'path'\nisFunction    = require 'util-ex/lib/is/type/function'\nisUndefined   = require 'util-ex/lib/is/type/undefined'\ndebug         = require('debug')('loopback:component:autoMigrate:autoMigrate')\nappRoot       = require 'app-root-path'\nmodels        = require appRoot + '/server/model-config.json'\nmodelNames    = require './model-names'\n\n# drop all tables and create all tables from models.\nmodule.exports = (app, options)->\n  vModels = []\n  vModelNames = (options and options.models) || modelNames\n  Promise.map vModelNames, (model)->\n    ds = app.dataSources[models[model].dataSource]\n    ds.setMaxListeners(0)\n    if ds.connected\n      result = ds.automigrate model\n    else\n      new Promise (resolve, reject)->\n        ds.once 'connected', ->\n          resolve ds.automigrate model\n  .each (item, index)->\n    item = vModelNames[index] unless item\n    debug 'Model ' + item + ' automigrated'\n    vModels.push app.models[item]\n  .then (results)->\n    debug 'total '+results.length+ ' models migrated.'\n    return vModels\n\n"
  ]
}