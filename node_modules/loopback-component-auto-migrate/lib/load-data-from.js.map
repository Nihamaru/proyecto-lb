{
  "version": 3,
  "file": "load-data-from.js",
  "sourceRoot": "../src/",
  "sources": [
    "load-data-from.coffee"
  ],
  "names": [],
  "mappings": "AAAA;EAAA;AAAA,MAAA,OAAA,EAAA,KAAA,EAAA,UAAA,EAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAAA,UAAA,EAAA,QAAA,EAAA;;EAEA,OAAA,GAAc,OAAA,CAAQ,UAAR;;EACd,UAAA,GAAc,OAAA,CAAQ,YAAR;;EACd,IAAA,GAAc,OAAA,CAAQ,MAAR;;EACd,UAAA,GAAc,OAAA,CAAQ,8BAAR;;EACd,OAAA,GAAc,OAAA,CAAQ,2BAAR;;EACd,QAAA,GAAc,OAAA,CAAQ,4BAAR;;EACd,KAAA,GAAc,OAAA,CAAQ,OAAR,CAAA,CAAiB,6CAAjB;;EAEd,QAAA,GAAc,OAAA,CAAQ,aAAR;;EACd,UAAA,GAAc,OAAA,CAAQ,kBAAR;;EACd,UAAA,GAAc,UAAU,CAAC,KAZzB;;;EAeA,MAAM,CAAC,OAAP,GAAiB,QAAA,CAAC,GAAD,EAAM,KAAN,EAAa,MAAb,EAAqB,UAArB,EAAiC,IAAjC,CAAA;AACf,QAAA;IAAA,IAA6B,QAAA,CAAS,KAAT,CAA7B;MAAA,KAAA,GAAQ,GAAG,CAAC,MAAO,CAAA,KAAA,EAAnB;;IACA,IAAA,CAA6E,KAA7E;AAAA,aAAO,OAAO,CAAC,MAAR,CAAe,IAAI,SAAJ,CAAc,eAAd,CAAf,CAA6C,CAAC,UAA9C,CAAyD,IAAzD,EAAP;;IAEA,KAAA,GAAQ,IAAA,GAAO,UAAU,CAAC,SAAX,CAAqB,KAAK,CAAC,SAA3B,EAAsC,CAAC,YAAD,EAAe,WAAf,CAAtC;WACf,UAAA,CAAW,IAAI,CAAC,OAAL,CAAa,MAAb,EAAqB,KAArB,CAAX,CACA,CAAC,IADD,CACM,QAAA,CAAC,IAAD,CAAA;MACJ,IAA2C,IAA3C;QAAA,IAAA,GAAO,QAAA,CAAS,KAAT,EAAgB,IAAhB,EAAsB,UAAtB,EAAP;;aACA;IAFI,CADN,CAIA,CAAC,UAJD,CAIY,IAJZ;EALe;;EAfjB;;;;;;AAAA",
  "sourcesContent": [
    "# require './register-config-file-format'\n\nPromise     = require \"bluebird\"\ninflection  = require 'inflection'\npath        = require 'path'\nisFunction  = require 'util-ex/lib/is/type/function'\nisArray     = require 'util-ex/lib/is/type/array'\nisString    = require 'util-ex/lib/is/type/string'\ndebug       = require('debug')('loopback:component:autoMigrate:loadDataFrom')\n\nloadData    = require './load-data'\nloadConfig  = require 'load-config-file'\nloadConfig  = loadConfig.load\n\n# load data to Model from a folder\nmodule.exports = (app, Model, folder, raiseError, done) ->\n  Model = app.models[Model] if isString Model\n  return Promise.reject(new TypeError 'Missing Model').asCallback(done) unless Model\n\n  vName = './' + inflection.transform Model.modelName, ['underscore', 'dasherize']\n  loadConfig path.resolve folder, vName\n  .then (data)->\n    data = loadData Model, data, raiseError if data\n    data\n  .asCallback done\n  # vData = loadConfig path.resolve folder, vName\n  # console.log vData\n  # if vData\n  #   loadData Model, vData, done\n  # else\n  #   done()\n\n"
  ]
}