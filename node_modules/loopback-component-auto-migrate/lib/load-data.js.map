{
  "version": 3,
  "file": "load-data.js",
  "sourceRoot": "../src/",
  "sources": [
    "load-data.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Promise     = require \"bluebird\"\n\nisFunction  = require 'util-ex/lib/is/type/function'\nisArray     = require 'util-ex/lib/is/type/array'\nisString    = require 'util-ex/lib/is/type/string'\ndebug       = require('debug')('loopback:component:autoMigrate:loadData')\nloopback    = require 'loopback'\npath        = require 'path'\n\n# import data to database from /server/data/ folder\n# need promise to done.\nmodule.exports = (Model, data, raiseError, done) ->\n  reject = (err)->\n    Promise.reject err\n    .asCallback done\n\n  vFile = if data.$cfgPath then path.basename(data.$cfgPath) else 'DATA'\n  return reject(new TypeError '%s: The data should be an array.', vFile) unless isArray data\n  Model = loopback.getModel(Model) if isString Model\n  return reject(new TypeError '%s: Missing Model', vFile) unless Model\n\n  Promise.map data, (item)->\n    Model.create item\n    .then (result)->\n      if result\n        delayed = []\n        for k,v of item\n          # try to determine the hasMany relation\n          vRelation = result[k]\n          if isFunction(vRelation) and isFunction(vRelation.create) and isArray(v)\n            ((aRelation, aData)->\n              delayed.push Promise.map aData, (data)->\n                aRelation.create data\n                .catch (err)->\n                  throw err if raiseError\n                  debug '(IGNORE) Relation %s(%s) %O', Model.modelName, k, err\n            )(vRelation, v)\n        result = Promise.all(delayed) if delayed.length\n      result\n    .catch (err)->\n      throw err if raiseError\n      debug '(IGNORE) %s %O', Model.modelName, err\n  .each (result, index)->\n    debug '%s: %O', Model.modelName, result\n    return result\n  .then (results)->\n    debug Model.modelName + ': total ' + results.length + ' data created.'\n    return results\n  .catch (err)->\n    err.name = vFile + ':' + err.name\n    throw err\n  .asCallback done\n"
  ]
}